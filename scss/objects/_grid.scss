/*
  GRID
  Responsive chainable grid classes, complete with subgrids. These are all
  generated from the settings in $grids-breakpoints.
*/

@mixin column($width, $gutter) {
  position: relative;
  float: left;
  width: $width;
  padding-left: $gutter / 2;
  padding-right: $gutter / 2;
}

@each $grid-name, $grid-settings in $grid-breakpoints {
  $query: map-get($grid-settings, query);
  $columns: map-get($grid-settings, columns);
  $gutter: map-get($grid-settings, gutter);
  $sub-grids: map-get($grid-settings, sub-grids);

  @include media($query) {
    @for $i from 1 through $columns {
      .#{$grid-name}-#{$i} {
        @include column(percentage($i / $columns), $gutter);
      }

      .#{$grid-name}-push-#{$i} {
        left: percentage($i / $columns);
      }

      .#{$grid-name}-pull-#{$i} {
        left: -(percentage($i / $columns));
      }

      .#{$grid-name}-offset-#{$i} {
        margin-left: percentage($i / $columns);
      }
    }

    @each $sub-grid-columns in $sub-grids {
      @for $i from 1 through $sub-grid-columns {
        .#{$grid-name}-#{$i}-of-#{$sub-grid-columns} {
          @include column(percentage($i / $columns), $gutter);
        }
      }
    }
  }
}

// Columns go in rows to set up the proper max width and for clearfixing
.grid-row {
  max-width: $max-width;
  margin: 0 auto;

  @each $grid-name, $grid-settings in $grid-breakpoints {
    $query: map-get($grid-settings, query);
    $gutter: map-get($grid-settings, gutter);

    @include media($query) {
      padding-left: $gutter / 2;
      padding-right: $gutter / 2;
    }
  }
}
